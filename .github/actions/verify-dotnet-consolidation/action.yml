name: Verify that .NET packages are consolidated
description: >
  Verifies that the NuGet packages of a .NET solution are consolidated, i.e. the same version of a given package is used
  in all projects.

inputs:
  directory:
    required: false
    default: .
    description: Path to the directory where a solution file can be found.
  solution-path:
    required: false
    default: '*.sln'
    description: >
      The path of the solution file to be processed. The value is given to PowerShell's `Get-ChildItem` cmdlet as-is, so
      grepping is still possible but a name with spaces must be escaped separately.
  exclude-version-regex:
    required: false
    default: '\-alpha'
    description: A regular expression to match package versions that will be skipped during checking.

runs:
  using: "composite"
  steps:
    - name: Install dotnet-consolidate
      uses: Lombiq/GitHub-Actions/.github/actions/install-dotnet-tool@dev
      with:
        name: dotnet-consolidate
        version: 4.2.0

    - name: Verify consolidation status
      shell: pwsh
      working-directory: ${{ inputs.directory }}
      env:
        ExcludeVersionRegex: ${{ inputs.exclude-version-regex }}
      run: |
        $consolidateParams = @(
            '--solutions', (Get-ChildItem '${{ inputs.solution-path }}').FullName
            '--excludedVersionsRegex', $Env:ExcludeVersionRegex
        )

        $output = dotnet consolidate @consolidateParams 2>&1 | Out-String -Width 9999

        Write-Output $output

        # An error in the options won't cause dotnet-consolidate to return a non-zero exit code, so we need to check the
        # output for errors.
        if ($LASTEXITCODE -ne 0 -or $output.Contains('ERROR(S)'))
        {
            Write-Error '::error::dotnet consolidate failed with the above errors.'
        }
