name: Swap Azure Web App Slots

concurrency:
  group: ${{ inputs.app-name }}AzureWorkflow

permissions:
  id-token: write
  contents: read

on:
  workflow_call:
    secrets:
      # These secrets are for OpenID Connect-based authentication with Azure services through the azure/login action
      # (proxied by our login-to-azure action below). Check out its documentation on how these secrets are used:
      # https://github.com/azure/login.
      AZURE_APP_SERVICE_SWAP_SERVICE_PRINCIPAL_ID:
        required: true
        description: >
          The Application (client) ID of the Azure Service Principal or Managed Credential, which will be mapped to the
          client-id parameter when calling azure/login.
      AZURE_APP_SERVICE_SWAP_AZURE_TENANT_ID:
        required: true
        description: >
          The Tenant (Directory) ID of the Microsoft Entra ID tenant, which will be mapped to the tenant-id parameter
          when calling azure/login.
      AZURE_APP_SERVICE_SWAP_AZURE_SUBSCRIPTION_ID:
        required: true
        description: >
          The ID of the Azure Subscription the resources are under, which will be mapped to the subscription-id
          parameter when calling azure/login. You can look this up e.g. in the Azure Portal under any resource or the
          subscription itself.
      CODE_REPOSITORY_WRITE_TOKEN:
        default: ${{ github.token }}
        required: false
        description: >
          An authentication token, like a personal access token (PAT) that gives access to the other repository.
          This is necessary because the repository that triggered the workflow and the repository that the workflow is
          running on are different in this case.

    inputs:
      cancel-workflow-on-failure:
        description: When set to "true", it will cancel the current workflow run with all jobs if this workflow fails.
        type: string
        default: 'false'
      machine-type:
        type: string
        default: ubuntu-22.04
        description: The name of the type of machine to run the workflow under.
      timeout-minutes:
        type: number
        default: 360
        description: Configuration for the timeout-minutes parameter of the workflow. The 360 is GitHub's default.
      app-name:
        required: true
        type: string
        description: What you see at the top of the blade on the Azure Portal. Can contain uppercase letters too.
      source-slot-name:
        type: string
        default: Staging
        description: >
          The slot name of the web app you want to swap the destination slot (of the same web app) with. What you see at
          the top of the blade on the Azure Portal, when you open the slot, before the app name in parenthesis.
      destination-slot-name:
        type: string
        default: Production
        description: >
          The slot name of the web app you want to swap with the source slot (of the same web app). What you see at the
          top of the blade on the Azure Portal, when you open the slot, before the app name in parenthesis.
      resource-group-name:
        required: true
        type: string
        description: Name of the resource group.
      application-insights-resource-id:
        required: true
        type: string
        description: >
          ID of the Application Insights resource that the release annotation for the swap should be added to.
          This can e.g. be looked up on the Azure Portal under the given AI resource's Overview page -> JSON View.
      app-code-repo:
        type: string
        default: ''
        required: false
        description: >
          The repository that hosts the code that will be swapped. This is necessary for adding tags.
      ref:
        type: string
        required: false
        description: >
          The branch, tag or SHA to checkout. When checking out the repository that triggered a workflow, this defaults
          to the reference or SHA for that event. Otherwise, uses the default branch.
      tag-prefix:
        type: string
        default: ${{ inputs.destination-slot-name }}
        required: false
        description: >
          The prefix for the tags that will be added to the app-code-repo. If not set, the slot name will be used as
          the prefix. The tag will be in the format of "<prefix>/latest" and "<prefix>/<timestamp>". This is used for
          tracking what's deployed, where and when by tagging the deployed commit.
      swap-prefix:
        type: string
        default: ${{ inputs.source-slot-name }}
        required: false
        description: >
          The prefix of the deployment tag that we will be looking for in the app-code-repo. If not set, the source
          slot name will be used as the prefix. This is used to find the currently deployed commit by its tag in the
          app-code-repo.

jobs:
  swap-azure-web-app-slots:
    runs-on: ${{ inputs.machine-type }}
    name: Swap Azure Web App Slots
    environment: ${{ inputs.destination-slot-name }}
    defaults:
      run:
        shell: pwsh
    timeout-minutes: ${{ inputs.timeout-minutes }}
    steps:
      - name: Login to Azure
        uses: Lombiq/GitHub-Actions/.github/actions/login-to-azure@dev
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_APP_SERVICE_SWAP_SERVICE_PRINCIPAL_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_APP_SERVICE_SWAP_AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_APP_SERVICE_SWAP_AZURE_SUBSCRIPTION_ID }}

      - name: Initialize PowerShell modules
        uses: Lombiq/Infrastructure-Scripts/.github/actions/initialize@dev

      - name: Test Source Web App Slot
        run: |
          Test-AzureWebApp `
            -ResourceGroupName ${{ inputs.resource-group-name }} `
            -WebAppName ${{ inputs.app-name }} `
            -SlotName ${{ inputs.source-slot-name }}

      - name: Swap Web App Slots
        run: |
          Switch-AzWebAppSlot `
            -ResourceGroupName ${{ inputs.resource-group-name }} `
            -Name ${{ inputs.app-name }} `
            -SourceSlotName ${{ inputs.source-slot-name }} `
            -DestinationSlotName ${{ inputs.destination-slot-name }}

      - name: Add Azure Application Insights Release Annotation
        uses: Lombiq/GitHub-Actions/.github/actions/add-azure-application-insights-release-annotation@dev
        with:
          release-name: 'Swap #${{ github.run_number }} from ${{ inputs.source-slot-name }} to ${{ inputs.destination-slot-name }}'
          application-insights-resource-id: ${{ inputs.application-insights-resource-id }}

      - name: Test Destination Web App Slot
        run: |
          Test-AzureWebApp `
            -ResourceGroupName ${{ inputs.resource-group-name }} `
            -WebAppName ${{ inputs.app-name }} `
            -SlotName ${{ inputs.destination-slot-name }}

      - name: Checkout Code Repository
        if: inputs.app-code-repo != ''
        uses: Lombiq/GitHub-Actions/.github/actions/checkout@dev
        with:
          repository: ${{ inputs.app-code-repo }}
          ref: ${{ inputs.ref }}
          token: ${{ secrets.CODE_REPOSITORY_WRITE_TOKEN }}

      - name: Setup Git Config
        if: inputs.app-code-repo != ''
        run: |
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
          git config user.name 'github-actions[bot]'

      - name: Remove old tags
        uses: Lombiq/GitHub-Actions/.github/actions/remove-old-tags@issue/OSOE-861
        with:
          tag-prefix: ${{ inputs.tag-prefix }}

      - name: Create timestamp
        id: create-timestamp
        uses: Lombiq/GitHub-Actions/.github/actions/create-timestamp@issue/OSOE-861

      - name: Determine timestamp
        id: determine-timestamp
        run: |
            # Get the current timestamp in the format of yyyy-MM-dd-HH.mmUTC - can't use : in tags
            "timestamp=$(Get-Date -Format 'yyyy-MM-dd-HH.mmUTC')" >> $Env:GITHUB_OUTPUT

      - name: Delete Old prefix/latest tag
        if: inputs.app-code-repo != ''
        run: |
            $latestTag = (git tag --list '${{ inputs.tag-prefix }}/latest')
            if ($latestTag)
            {
                git tag -d '${{ inputs.tag-prefix }}/latest'
                git push origin ':refs/tags/${{ inputs.tag-prefix }}/latest'
            }

      - name: Move Latest Tag (Swap) and Add Timestamp Tag
        if: inputs.app-code-repo != ''
        run: |
            if([string]::IsNullOrEmpty('${{ inputs.tag-prefix }}'))
            {
                throw 'Tag prefix not set, exiting'
            }

            $tagExists = (git tag --list '${{ inputs.swap-prefix }}/latest')
            if ([string]::IsNullOrEmpty($tagExists))
            {
                throw 'No latest tag found for swap prefix'
            }

            $latest = (git rev-list -n 1 '${{ inputs.swap-prefix }}/latest')
            if ($latest)
            {
                git tag --annotate '${{ inputs.tag-prefix }}/latest' $latest --message 'Latest tag for ${{ inputs.tag-prefix }}'
                git push origin tag '${{ inputs.tag-prefix }}/latest'
                $gitMessage = 'Swap tagged at ${{steps.determine-timestamp.outputs.timestamp}}'
                git tag --annotate '${{ inputs.tag-prefix }}/${{steps.determine-timestamp.outputs.timestamp}}' $latest --message $gitMessage
                git push origin tag '${{ inputs.tag-prefix }}/${{steps.determine-timestamp.outputs.timestamp}}'
            }
            else
            {
                throw "No latest tag found for swap prefix"
            }

      - name: Create Release
        uses: Lombiq/GitHub-Actions/.github/actions/release-action@issue/OSOE-861
        if: inputs.app-code-repo != ''
        with:
          repo: ${{ inputs.app-code-repo }}
          token: ${{ secrets.CODE_REPOSITORY_WRITE_TOKEN }}
          tag: ${{ inputs.tag-prefix }}/latest
          allowUpdates: true
          generateReleaseNotes: true

      - name: Cancel Workflow on Failure
        if: failure() && inputs.cancel-workflow-on-failure == 'true'
        uses: Lombiq/GitHub-Actions/.github/actions/cancel-workflow@dev
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
