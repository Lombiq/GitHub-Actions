name: Build and Test
on:
  pull_request:
  push:
    branches:
      - dev
env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
defaults:
  run:
    shell: pwsh
jobs:
  build_test:
    runs-on: ${{ matrix.os }}
    name: Build and Test
    strategy:
      matrix:
        #directory: ['.', 'NuGetTest']
        #os: [ubuntu-latest, windows-latest]
        directory: ['NuGetTest']
        os: [ubuntu-latest, windows-latest]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.*
    - name: Submodule Init
      run: |
        git submodule init && git submodule update
    - name: Build and Static Code Analysis
      shell: bash
      run: |
        cd "${{matrix.directory}}"
        npm install pnpm -g
        [ -f src/Utilities/Lombiq.Gulp.Extensions/Lombiq.Gulp.Extensions.csproj ] &&
            dotnet build src/Utilities/Lombiq.Gulp.Extensions/Lombiq.Gulp.Extensions.csproj --configuration Release
        dotnet build *.sln \
          --configuration Release \
          -warnaserror \
          -p:TreatWarningsAsErrors=true \
          -p:RunAnalyzersDuringBuild=true \
          -p:NoWarn='"1591;CA1014"'\
          -nologo \
          -consoleLoggerParameters:NoSummary \
          -verbosity:quiet
    - name: Set up SQL Server
      run: |
        if ($Env:RUNNER_OS -eq "Linux")
        {
            docker pull mcr.microsoft.com/mssql/server &&
            docker run --name sql2019 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password1!' -p 1433:1433 -d 'mcr.microsoft.com/mssql/server:2019-latest' &&
            docker exec -u 0 sql2019 bash -c 'mkdir /data; chmod 777 /data -R; chown mssql:root /data'
        }
        else
        {
            choco install sql-server-express --no-progress
        }
    - name: Wait for SQL Server to start
      run: |
        $maxTryCount = 10
            
        for ($i = 1; $i -le $maxTryCount; $i++)
        {
            echo "Waiting for SQL Server to start. Attempt $i/$maxTryCount."

            if ($Env:RUNNER_OS -eq "Linux")
            {
                sqlcmd -b -U sa -P 'Password1!' -Q "SELECT @@SERVERNAME as ServerName" 2>&1>$null
            }
            else
            {
                sqlcmd -b -S .\SQLEXPRESS -Q "SELECT @@SERVERNAME as ServerName" 2>&1>$null
            }
                
            if ($?)
            {
                echo "SQL Server is successfully started."
                break
            }
            else
            {
                if ($i -ne $maxTryCount)
                {
                    echo "SQL Server is not ready. Waiting for 1s."
                    Start-Sleep -s 1
                }
                else
                {
                    echo "SQL Server couldn't be started."
                    Exit 1
                }
            }
        }
    - name: Set up Azurite via NPM
      # This needs to run in bash for some reason. Azurite properly starts in PS but still, connections fail.
      shell: bash
      run: |
        npm install -g azurite
        azurite --silent --location ${{matrix.directory}}/azurite --debug ${{matrix.directory}}/azurite/debug.log &
    - name: Tests
      shell: bash
      # This step gets the list of all projects, selects the test projects (excluding the two test libraries) and then
      # uses sed to create an inline bash script. What this script does:
      # - Uses 'dotnet test -c Release --no-restore --no-build' to start up each project.
      # - The test output is wrapped by '::group::<project name>' before and '::endgroup::' after it. This tells GitHub
      #   to place each test's output into a collapsible region on the Actions web UI.
      # - Each call is connected with '&&', so it stops on the first test failure to save computational resources.
      #
      # The script is evaluated by bash and the output is passed through grep to filter out some IPv6 related garbage
      # data produced by chromedriver. The trouble is, this way the final error code will be grep's and not the test
      # run's, so to get around this 'SUCCESS' or 'FAILURE' is written into the .ui_test_result file before the output
      # is sent to grep. The final line sets the result according to what was written into the .ui_test_result file.
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
            export Lombiq_Tests_UI__SqlServerDatabaseConfiguration__ConnectionStringTemplate="Server=.;Database=LombiqUITestingToolbox_{{id}};User Id=sa;Password=Password1!;MultipleActiveResultSets=True;Connection Timeout=60;ConnectRetryCount=15;ConnectRetryInterval=5"
            export Lombiq_Tests_UI__DockerConfiguration__ContainerName="sql2019"
        else
            export Lombiq_Tests_UI__SqlServerDatabaseConfiguration__ConnectionStringTemplate="Server=.\\SQLEXPRESS;Database=LombiqUITestingToolbox_{{id}};Integrated Security=True;MultipleActiveResultSets=True;Connection Timeout=60;ConnectRetryCount=15;ConnectRetryInterval=5"
        fi

        cd "${{matrix.directory}}"

        (dotnet sln list |
            grep '.Tests.' |
            grep -v 'Lombiq.Tests.UI.csproj' |
            grep -v 'Lombiq.Tests.csproj' |
            sed -e 's/\\/\//g' \
                -e '$atrue' \
                -e 's/\(.*\)/echo "::group::\1" \&\&\ndotnet test -c Release --no-restore --no-build '"'\\1'"' \&\&\necho "::endgroup::" \&\&/' |
            bash && (echo SUCCESS > .ui_test_result) || (echo FAIL > .ui_test_result)) |
            grep -v '^Connection refused \[::ffff:127.0.0.1\]';
        grep SUCCESS .ui_test_result
    - name: Test artifacts
      run: |
        Get-ChildItem -Recurse ${{matrix.directory}}/test/Lombiq.OSOCE.NuGet.Tests.UI/bin/Release/net6.0/FailureDumps
    - name: Upload artifacts
      uses: actions/upload-artifact@v2
      if: hashFiles(format('{0}/test/**/FailureDumps', matrix.directory))
      with:
          name: ui-test-failure-dump
          path: format('{0}/test/**/FailureDumps', matrix.directory)
