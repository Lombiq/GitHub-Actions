name: Build and Test

# Runs for PRs opened for any branch, and pushes to the dev branch.
on:
  pull_request:
  push:
    branches:
      - dev

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

defaults:
  run:
    shell: pwsh

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    name: Build and Test
    strategy:
      matrix:
        directory: ['.', 'NuGetTest']
        os: [ubuntu-latest, windows-latest]
    timeout-minutes: 60
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Setup .NET Core 6.0
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.*

    - name: Build and Static Code Analysis
      working-directory: ${{ matrix.directory }}
      run: |
        npm install pnpm -g

        if (Test-Path src/Utilities/Lombiq.Gulp.Extensions/Lombiq.Gulp.Extensions.csproj)
        {
            dotnet build src/Utilities/Lombiq.Gulp.Extensions/Lombiq.Gulp.Extensions.csproj --configuration Release
        }

        dotnet build (Get-ChildItem *.sln).FullName `
          --configuration Release `
          -warnaserror `
          -p:TreatWarningsAsErrors=true `
          -p:RunAnalyzersDuringBuild=true `
          -nologo `
          -consoleLoggerParameters:NoSummary `
          -verbosity:quiet

    - name: Set up SQL Server
      run: |
        if ($Env:RUNNER_OS -eq "Linux")
        {
            docker pull mcr.microsoft.com/mssql/server &&
            docker run --name sql2019 -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=Password1!' -p 1433:1433 -d 'mcr.microsoft.com/mssql/server:2019-latest' &&
            docker exec -u 0 sql2019 bash -c 'mkdir /data; chmod 777 /data -R; chown mssql:root /data'
        }
        else
        {
            choco install sql-server-express --no-progress
        }

    # Needs to be a separate step, otherwise the Chocolatey installation won't be visible.
    - name: Wait for SQL Server to start
      run: |
        $maxTryCount = 10

        for ($i = 1; $i -le $maxTryCount; $i++)
        {
            echo "Waiting for SQL Server to start. Attempt $i/$maxTryCount."

            if ($Env:RUNNER_OS -eq "Linux")
            {
                sqlcmd -b -U sa -P 'Password1!' -Q "SELECT @@SERVERNAME as ServerName" 2>&1>$null
            }
            else
            {
                sqlcmd -b -S .\SQLEXPRESS -Q "SELECT @@SERVERNAME as ServerName" 2>&1>$null
            }

            if ($?)
            {
                echo "SQL Server is successfully started."
                Exit 0
            }

            if ($i -eq $maxTryCount)
            {
                echo "SQL Server couldn't be started."
                Exit 1
            }

            echo "SQL Server is not ready. Waiting 1 second."
            Start-Sleep -s 1
        }

    - name: Set up Azurite via NPM
      # This needs to run in bash for some reason. Azurite properly starts in PS but still, connections fail.
      shell: bash
      run: |
        npm install -g azurite
        azurite --silent --location ${{matrix.directory}}/azurite --debug ${{matrix.directory}}/azurite/debug.log &

    # This step gets the list of all projects, selects the test projects (excluding the two test libraries) and then
    # uses sed to create an inline bash script. What this script does:
    # - Uses 'dotnet test -c Release --no-restore --no-build' to start up each project.
    # - The test output is wrapped by '::group::<project name>' before and '::endgroup::' after it. This tells GitHub to
    #   place each test's output into a collapsible region on the Actions web UI.
    # - Each call is connected with '&&', so it stops on the first test failure to save computational resources.
    #
    # The script is evaluated by bash and the output is passed through grep to filter out some IPv6 related garbage data
    # produced by chromedriver. The trouble is, this way the final error code will be grep's and not the test run's, so
    # to get around this 'SUCCESS' or 'FAILURE' is written into the .ui_test_result file before the output is sent to
    # grep. The final line sets the result according to what was written into the .ui_test_result file.
    - name: Tests
      working-directory: ${{ matrix.directory }}
      run: |
        if ($Env:RUNNER_OS -eq "Linux")
        {
            Set-Item -Path Env:\Lombiq_Tests_UI__SqlServerDatabaseConfiguration__ConnectionStringTemplate `
                -Value 'Server=.;Database=LombiqUITestingToolbox_{{id}};User Id=sa;Password=Password1!;MultipleActiveResultSets=True;Connection Timeout=60;ConnectRetryCount=15;ConnectRetryInterval=5'
            Set-Item -Path Env:\Lombiq_Tests_UI__DockerConfiguration__ContainerName -Value 'sql2019'
        }
        else
        {
            Set-Item -Path Env:\Lombiq_Tests_UI__SqlServerDatabaseConfiguration__ConnectionStringTemplate `
                -Value 'Server=.\\SQLEXPRESS;Database=LombiqUITestingToolbox_{{id}};Integrated Security=True;MultipleActiveResultSets=True;Connection Timeout=60;ConnectRetryCount=15;ConnectRetryInterval=5'
        }

        $tests = dotnet sln list |
            Select-Object -Skip 2 |
            Select-String '\.Tests\.' |
            ? {
                $result =  (dotnet test --no-restore --list-tests --verbosity quiet $_ 2>&1) -join [System.Environment]::NewLine
                -not [string]::IsNullOrEmpty($result) -and $result.Contains('The following Tests are available')
            }

        foreach ($test in $tests) {
            $result = (dotnet test -c Release --no-restore --no-build --nologo --verbosity quiet $test)

            if ($?)
            {
                echo "Test Successful: $test"
                continue
            }

            $needsGrouping = -not $result.Contains('::group::')

            if ($needsGrouping) { echo "::group::$test" }
            echo $result
            if ($needsGrouping) { echo "::endgroup::" }

            exit 1
        }

    # Note that this will fail under Windows if the path is too long, regardless of LongPathsEnabled, see:
    # https://github.com/actions/upload-artifact/issues/309. We can't do much about this apart from uploading artifacts
    # in a low-level way.
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      # Needs to be always() so if there's a failure dump, it'll be uploaded even if with retries the tests passed.
      if: always() && hashFiles(format('{0}/test/**/FailureDumps', matrix.directory))
      with:
        name: ui-test-failure-dump-${{ matrix.directory }}-${{ matrix.os }}
        path: ${{ matrix.directory }}/test/**/FailureDumps/
        if-no-files-found: ignore
